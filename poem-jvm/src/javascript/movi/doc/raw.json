{"majorversion": 2, "filemap": {"zoom.js": {"classlist": ["MOVI.widget.ZoomSlider", "MOVI.widget.FullscreenViewer"], "name": "zoom.js", "module": "movi"}, "modelnavigator.js": {"classlist": ["MOVI.widget.ModelNavigator"], "name": "modelnavigator.js", "module": "movi"}, "x-tooltip-annotation.js": {"classlist": [], "name": "x-tooltip-annotation.js", "module": "movi"}, "movi.js": {"classlist": [], "name": "movi.js", "module": "movi"}, "modelviewer.js": {"classlist": ["MOVI.widget.ModelViewer"], "name": "modelviewer.js", "module": "movi"}, "x-issue-annotation.js": {"classlist": [], "name": "x-issue-annotation.js", "module": "movi"}, "node.js": {"classlist": ["MOVI.model.Node"], "name": "node.js", "module": "movi"}, "stencilset.js": {"classlist": ["MOVI.stencilset.Stencilset"], "name": "stencilset.js", "module": "movi"}, "shapeselect.js": {"classlist": ["MOVI.util.ShapeSelect"], "name": "shapeselect.js", "module": "movi"}, "edge.js": {"classlist": ["MOVI.model.Edge"], "name": "edge.js", "module": "movi"}, "toolbar.js": {"classlist": ["MOVI.widget.Toolbar"], "name": "toolbar.js", "module": "movi"}, "marker.js": {"classlist": ["MOVI.util.Marker"], "name": "marker.js", "module": "movi"}, "config.js": {"classlist": [], "name": "config.js", "module": "movi"}, "shape.js": {"classlist": ["MOVI.model.Shape"], "name": "shape.js", "module": "movi"}, "stencil.js": {"classlist": ["MOVI.stencilset.Stencil"], "name": "stencil.js", "module": "movi"}, "canvas.js": {"classlist": ["MOVI.model.Canvas"], "name": "canvas.js", "module": "movi"}, "annotation.js": {"classlist": ["MOVI.util.Annotation"], "name": "annotation.js", "module": "movi"}}, "modules": {"movi": {"description": "Declare the movi module (needed for doc generation)", "submodules": [], "classlist": ["MOVI.util.Annotation", "MOVI.model.Canvas", "MOVI.model.Edge", "MOVI.util.Marker", "MOVI.widget.ModelNavigator", "MOVI.widget.ModelViewer", "MOVI.model.Node", "MOVI.model.Shape", "MOVI.util.ShapeSelect", "MOVI.stencilset.Stencil", "MOVI.stencilset.Stencilset", "MOVI.widget.Toolbar", "MOVI.widget.ZoomSlider", "MOVI.widget.FullscreenViewer"], "filelist": ["annotation.js", "canvas.js", "config.js", "edge.js", "marker.js", "modelnavigator.js", "modelviewer.js", "movi.js", "node.js", "shape.js", "shapeselect.js", "stencil.js", "stencilset.js", "toolbar.js", "x-issue-annotation.js", "x-tooltip-annotation.js", "zoom.js"], "subdata": {}, "name": "movi"}}, "classmap": {"MOVI.model.Edge": {"name": "MOVI.model.Edge", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new edge\nis created."}, {"type": "Object", "name": "stencilset", "description": " The stencilset for lookup of the edge's \nstencil."}, {"type": "Shape", "name": "parent", "description": " The edges's parent shape"}, {"type": "String", "name": "prefix", "description": " The element's ID prefix (unique per modelviewer)"}], "description": "A wrapper class for model edges."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Edge", "methods": {"update": {"description": "Update style properties of the element", "guessedname": "update", "guessedtype": "function"}}, "extends": "MOVI.model.Shape", "superclass": "MOVI.model.Shape", "file": "edge.js", "guessedtype": "function", "shortname": "Edge", "description": "A wrapper class for model edges."}, "MOVI.widget.Toolbar": {"modelviewer": "{ModelViewer} modelviewer The ModelViewer that is controlled", "name": "MOVI.widget.Toolbar", "constructors": [{"params": [{"type": "HTMLElement | String ", "name": "el", "description": " The id of the container DIV element that will \nwrap the Toolbar, or a reference to a DIV element. The DIV element must\nexist in the document."}], "description": "The Toolbar widget is a UI control that hosts buttons to trigger certain\nfunctionality. It allows generic registration of new toolbar buttons."}], "namespace": "MOVI.widget", "module": "movi", "guessedname": "Toolbar", "methods": {"showGroupCaptions": {"description": "Show captions for the button groups. (Per default captions are not shown)", "guessedname": "showGroupCaptions", "guessedtype": "function"}, "_update": {"private": "", "description": "Update the toolbar DOM node", "guessedname": "_update", "guessedtype": "function"}, "_setUpHostElementZoomSlider": {"private": "", "description": "Add image to the host element and create the clipping rectangle element.\nEnsure that host element's position is not static to allow absolute\npositioning of the clipping rect relative to the host element", "guessedname": "_setUpHostElementZoomSlider", "guessedtype": "function"}, "hideGroupCaptions": {"description": "Hide captions for the button groups. (Per default captions are not shown)", "guessedname": "hideGroupCaptions", "guessedtype": "function"}, "addButton": {"return": {"type": "String", "description": "An index to reference the button in the toolbar"}, "description": "Add a new button to the toolbar", "param": "{String} orientation The orientation of the icon to remove.", "params": [{"type": "Object} config Button configuration: \n<dl>\n<dt>{String} icon (optional)</dt>\n<dd>\nThe URL of an icon image\n</dd>\n<dt>{String} caption (optional)</dt>\n<dd>\nThe caption of the button\n</dd>\n<dt>{String} tooltip (optional)</dt>\n<dd>\nA tooltip message for the button\n</dd>\n<dt>{String} group (optional)</dt>\n<dd>\nThe button group to append the new button to. If no such group exists\nit will be created. Groups are positioned in the order they were created.\n</dd>\n<dt>{Function} callback</dt>\n<dd>The callback method when the button is triggered.</dd>\n<dt>{Object} scope (optional)</dt>\n<dd>The execution scope for the callback.</dd>\n<dt>{Any", "name": "data", "description": " (optional)</dt>\n<dd>\nAn optional data object to pass to the callback method\n</dd>\n</dl>"}], "guessedname": "addButton", "guessedtype": "function"}, "_getMinZoomLevel": {"private": "", "description": "Calculate the minimal zoom level in percent (stop zooming out when model fits the model viewer in height and width)", "guessedname": "_getMinZoomLevel", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "toolbar.js", "guessedtype": "function", "shortname": "Toolbar", "properties": {"modelviewer": {"type": "ModelViewer", "description": "The ModelViewer that is controlled", "guessedname": "modelviewer", "guessedtype": "property"}, "groups": {"guessedname": "_groups", "type": "{Object}", "description": "A key map containing all group objects with their name as keys", "private": "", "guessedtype": "property"}}, "description": "The Toolbar widget is a UI control that hosts buttons to trigger certain\nfunctionality. It allows generic registration of new toolbar buttons."}, "MOVI.model.Canvas": {"name": "MOVI.model.Canvas", "constructors": [{"params": [{"type": "Modelviewer", "name": "modelviewer", "description": " The Modelviewer object that owns\nthe canvas"}, {"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new canvas\nis created."}, {"type": "String", "name": "prefix", "description": " The element's ID prefix (unique per modelviewer)"}], "description": "Canvas provides a wrapper object for the model's root shape."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Canvas", "methods": {"_update": {"private": "", "description": "Update style properties of the element", "guessedname": "_update", "guessedtype": "function"}, "_indexShapes": {"guessedname": "_indexShapes", "params": [{"type": "Shape", "name": "recShape", "description": " (optional) Temporarily considered shape\nfor recursion"}], "description": "Index all shapes owned by the model. Deep traverse canvas'\nchild shapes and add all objects to the 'shapes' property.", "private": "", "guessedtype": "function"}, "getModelViewer": {"return": {"type": "ModelViewer", "description": "The owning model viewer"}, "description": "Returns the owning modelviewer", "guessedname": "getModelViewer", "guessedtype": "function"}, "getNodes": {"return": {"type": "Object", "description": "A key map (String -> Node) of all nodes with their resource ids as keys"}, "description": "Returns all nodes of the model", "guessedname": "getNodes", "guessedtype": "function"}, "getEdges": {"return": {"type": "Object", "description": "A key map (String -> Node) of all edges with their resource ids as keys"}, "description": "Returns all edges of the model", "guessedname": "getEdges", "guessedtype": "function"}, "getShape": {"params": [{"type": "", "name": "resourceId", "description": " The shape's resource id"}], "description": "Returns the shape with the specified resource id. \nIf no matching stencil is found null is returned.", "guessedname": "getShape", "guessedtype": "function"}}, "extends": "MOVI.model.Shape", "superclass": "MOVI.model.Shape", "file": "canvas.js", "guessedtype": "function", "shortname": "Canvas", "properties": {"shapes": {"type": "Object", "description": "A key map containing all shapes of the model with their\nresource ids as keys.", "guessedname": "shapes", "guessedtype": "property"}, "modelBorder": {"description": "The margin of the model's PNG image", "guessedname": "MODEL_MARGIN", "guessedtype": "property"}, "modelviewer": {"guessedname": "_modelviewer", "type": "Modelviewer", "description": "The owning modelviewer", "private": "", "guessedtype": "property"}}, "description": "Canvas provides a wrapper object for the model's root shape."}, "MOVI.model.Shape": {"name": "MOVI.model.Shape", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new shape\nis created"}, {"type": "Object", "name": "stencilset", "description": " The stencilset for lookup of the shape's \nstencil"}, {"type": "Shape", "name": "parent", "description": " The shapes's parent shape"}, {"type": "String", "name": "prefix", "description": " The element's ID prefix (unique per modelviewer)"}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the shape element's \ninitial attributes"}], "description": "An abstract base class providing a wrapper object for all \nmodel shapes (including the canvas, nodes, and edges)."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Shape", "methods": {"getCanvas": {"return": {"type": "Canvas", "description": "The Canvas the shape belongs to"}, "description": "Returns the canvas that owns this shape", "guessedname": "getCanvas", "guessedtype": "function"}, "getStencil": {"return": {"type": "Stencil", "description": "The stencil object"}, "description": "Returns the stencil of this shape", "guessedname": "getStencil", "guessedtype": "function"}, "getAbsBounds": {"return": {"type": "Object} The absolute shape bounds accessible as \n{ upperLeft: {x:Number,y:Number}, lowerRight: {x:Number,y:Number} ", "description": ""}, "description": "Returns the shape's absolute bounds coordinates. 'Absolute' means\nrelative to the canvas element rather than relative to the document", "guessedname": "getAbsBounds", "guessedtype": "function"}, "hasChildShapes": {"return": {"type": "Boolean", "description": "true if the shape has children, false otherwise"}, "description": "Tests if the shape has children", "guessedname": "hasChildShapes", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "shape.js", "guessedtype": "function", "shortname": "Shape", "properties": {"parentShape": {"description": "The shapes parent shape", "guessedname": "parentShape", "guessedtype": "property"}}, "description": "An abstract base class providing a wrapper object for all \nmodel shapes (including the canvas, nodes, and edges)."}, "MOVI.util.Marker": {"name": "MOVI.util.Marker", "constructors": [{"params": [{"type": "Shape|Shapes[]", "name": "shapes", "description": " The shapes to mark"}, {"type": "Object", "name": "style", "description": " (optional) A key map of CSS style properties to be attached\nto the shape marking rectangles."}], "description": "Attach Marker objects to the model to highlight a shape or a set of shapes\nby overlaying rectangles"}], "namespace": "MOVI.util", "module": "movi", "guessedname": "Marker", "methods": {"_setUpHostElement": {"private": "", "description": "Add image to the host element and create the clipping rectangle element.\nEnsure that host element's position is not static to allow absolute\npositioning of the clipping rect relative to the host element.", "guessedname": "_setUpHostElement", "guessedtype": "function"}, "_update": {"private": "", "description": "Update style properties of the shape rectangle elements and update the bounds of the\nouter marking rectangle element", "guessedname": "_update", "guessedtype": "function"}, "show": {"description": "Show the marker", "guessedname": "show", "guessedtype": "function"}, "addIcon": {"return": {"type": "Element", "description": "A reference to the new icon element"}, "params": [{"type": "String", "name": "orientation", "description": " The orientation where to position the icon.\nPossible values: 'north', 'west', 'south', 'east', 'northwest', 'southwest', 'northeast', 'southeast'"}, {"type": "HTMLElement|String", "name": "icon", "description": " An HTMLElement object representing the icon, or a String specifying\nthe URL of an image for the icon."}], "description": "Append an icon element to the bounds of the marker", "guessedname": "addIcon", "guessedtype": "function"}, "toggle": {"description": "Toggle show/hide the marker", "guessedname": "toggle", "guessedtype": "function"}, "removeIcon": {"params": [{"type": "String", "name": "orientation", "description": " The orientation of the icon to remove."}], "description": "Remove the icon that currently resides in the specified orientation from the marker", "guessedname": "removeIcon", "guessedtype": "function"}, "addShape": {"params": [{"type": "Shape", "name": "shape", "description": " The shape object to add"}], "description": "Add a shape to the marker", "guessedname": "addShape", "guessedtype": "function"}, "hide": {"description": "Hide the marker", "guessedname": "hide", "guessedtype": "function"}, "removeAllShapes": {"description": "Remove all shapes from the marker", "guessedname": "removeAllShapes", "guessedtype": "function"}, "getRectClassName": {"returns": "{String} The applied class name", "description": "Return the class name applied for all shape marking rectangle elements", "guessedname": "getRectClassName", "guessedtype": "function"}, "_onCanvasAvailable": {"private": "", "description": "Executes the user-specified callback when the canvas object the marker belongs to is available", "guessedname": "_onCanvasAvailable", "guessedtype": "function"}, "_updateIcons": {"private": "", "description": "Update positions of the icons appended to the marker", "guessedname": "_updateIcons", "guessedtype": "function"}, "onChanged": {"params": [{"type": "Function", "name": "callback", "description": " The callback method"}, {"type": "Object", "name": "scope", "description": " (optional) The execution scope of the callback \n(in none is specified the context of the Marker object is used)"}, {"type": "Object", "name": "data", "description": " (optional) An optional data object to pass to the callback method"}], "description": "Specify callback to be executed when the marker changes\n(shapes are added to or removed from the marker)", "guessedname": "onChanged", "guessedtype": "function"}, "onCanvasAvailable": {"params": [{"type": "Function", "name": "callback", "description": " The callback method"}, {"type": "Object", "name": "scope", "description": " (optional) The execution scope of the callback \n(in none is specified the context of the Marker object is used)"}, {"type": "Object", "name": "data", "description": " (optional) An optional data object to pass to the callback method"}], "description": "Specify callback to be executed when the canvas object the marker belongs to is available", "guessedname": "onCanvasAvailable", "guessedtype": "function"}, "getAbsBounds": {"return": {"type": "Object} The absolute marker bounds accessible as \n{ upperLeft: {x:Number,y:Number}, lowerRight: {x:Number,y:Number} ", "description": ""}, "description": "Returns the marker's absolute bounds coordinates. 'Absolute' means\nrelative to the canvas element rather than relative to the document", "guessedname": "getAbsBounds", "guessedtype": "function"}, "_onChanged": {"private": "", "description": "Executes the user-specified callback when the marker changed", "guessedname": "_onChanged", "guessedtype": "function"}, "getRectStyle": {"returns": "{Object} A key map storing the style properties", "params": [{"type": "String", "name": "property", "description": " The property"}], "description": "Returns the value for the specified style property that is applied to each \nshape marking rectangle element", "guessedname": "getRectStyle", "guessedtype": "function"}, "getShapes": {"params": [{"type": "[Shape]", "name": "An", "description": " array of the marked Shape objects"}], "description": "Return the marked shapes", "guessedname": "getShapes", "guessedtype": "function"}, "removeShape": {"params": [{"type": "Shape", "name": "shape", "description": " The shape object to be removed"}], "description": "Remove a shape from the marker", "guessedname": "removeShape", "guessedtype": "function"}, "setRectStyle": {"params": [{"type": "String", "name": "property", "description": " The property"}, {"type": "String", "name": "value", "description": " The value"}], "description": "Wrapper for setting style properties of all shape marking rectangle elements", "guessedname": "setRectStyle", "guessedtype": "function"}, "getIcon": {"return": {"type": "Element", "description": "The icon at the specified orientation (null if no icon resides at that\norientation)"}, "params": [{"type": "String", "name": "orientation", "description": " The orientation of the icon"}], "description": "Returns the icon element at the specified orientation.", "guessedname": "getIcon", "guessedtype": "function"}, "remove": {"description": "Remove the marker elements from the DOM", "guessedname": "remove", "guessedtype": "function"}, "setRectClassName": {"params": [{"type": "String", "name": "className", "description": " The class name value"}], "description": "Wrapper for setting the class name for all shape marking rectangle elements", "guessedname": "setRectClassName", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "marker.js", "guessedtype": "function", "shortname": "Marker", "properties": {"markerRect": {"type": "Element", "description": "The marker's outer rectangle element", "guessedname": "markerRect", "guessedtype": "property"}, "style": {"guessedname": "_style", "type": "Object", "description": "A key map containing the CSS style property definitions that are applied \nto each shape marking rectangle.", "private": "", "guessedtype": "property"}, "_shapes": {"guessedname": "_shapes", "type": "Object", "description": "A key map containing all marked shapes with their resource IDs as keys", "private": "", "guessedtype": "property"}, "_canvasAvailableCallback": {"guessedname": "_canvasAvailableCallback", "type": "Object", "description": "The callback object to be executed when the canvas object the marker belongs to is available", "private": "", "guessedtype": "property"}, "shapeRects": {"type": "{ Integer : Element }", "description": "A key map containing all shape rectangle elements of the marker with the\nassociated shape resource IDs as keys", "guessedname": "shapeRects", "guessedtype": "property"}, "_changedCallback": {"guessedname": "_changedCallback", "type": "Object", "description": "The callback object to be executed when the marker has changed", "private": "", "guessedtype": "property"}, "_className": {"guessedname": "_className", "type": "String", "description": "The class name that is specified for each shape marking rectangle.", "private": "", "guessedtype": "property"}, "canvas": {"type": "Canvas", "description": "The parent canvas element of this marker", "guessedname": "canvas", "guessedtype": "property"}, "MOVI.util.Marker.PADDING": {"description": "The padding beween the marker's border and the shape's border.", "default": "2", "static": "", "guessedname": "PADDING", "guessedtype": "property", "type": "integer"}, "_icons": {"guessedname": "_icons", "type": "Object", "description": "A hash map containing the icon elements with their orientation as key", "private": "", "guessedtype": "property"}}, "description": "Attach Marker objects to the model to highlight a shape or a set of shapes\nby overlaying rectangles"}, "MOVI.widget.FullscreenViewer": {"name": "MOVI.widget.FullscreenViewer", "constructors": [{"params": [{"type": "ModelViewer", "name": "modelviewer", "description": " The ModelViewer for that is viewed in fullscreen mode"}], "description": "The FullscreenViewer widget is a UI widget that displays the complete model in a\nlightbox fullscreen view."}], "namespace": "MOVI.widget", "module": "movi", "guessedname": "FullscreenViewer", "file": "zoom.js", "guessedtype": "function", "shortname": "FullscreenViewer", "properties": {"_modelViewerPlaceholder": {"guessedname": "_modelViewerPlaceholder", "type": "YAHOO.util.Element", "description": "A placeholder element that is swapped with the original model viewer element", "private": "", "guessedtype": "property"}, "_fullscreenContainer": {"guessedname": "_fullscreenContainer", "type": "YAHOO.util.Element", "description": "The fullscreen model viewer conatainer element", "private": "", "guessedtype": "property"}, "dialog": {"type": "YAHOO.widget.Dialog", "description": "The Dialog widget that represents the lightbox", "guessedname": "dialog", "guessedtype": "property"}}, "description": "The FullscreenViewer widget is a UI widget that displays the complete model in a\nlightbox fullscreen view."}, "MOVI.widget.ModelNavigator": {"modelviewer": "{ModelViewer} modelviewer The ModelViewer that is navigated", "name": "MOVI.widget.ModelNavigator", "constructors": [{"params": [{"type": "HTMLElement | String ", "name": "el", "description": " The id of the container DIV element that will \nwrap the ModelNavigator, or a reference to a DIV element. The DIV element must\nexist in the document."}], "description": "The ModelNavigator widget is a UI control that enables users to navigate\nin a model displayed in a ModelViewer component. A rectangle indicates the\nmodel clipping."}], "namespace": "MOVI.widget", "module": "movi", "guessedname": "ModelNavigator", "methods": {"_onMouseUp": {"private": "", "guessedname": "_onMouseUp", "guessedtype": "function"}, "_onClippingRectDrag": {"private": "", "guessedname": "_onClippingRectDrag", "guessedtype": "function"}, "_onClick": {"private": "", "guessedname": "_onClick", "guessedtype": "function"}, "update": {"description": "Callback to update the clipping rectangle's position and size.\nAlso updates the image if another model has been loaded in the \nmodel viewer.", "guessedname": "update", "guessedtype": "function"}, "_scrollMove": {"private": "", "description": "Callback method that is executed when the clipping rectangle is moved", "guessedname": "_onClippingRectMove", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "modelnavigator.js", "guessedtype": "function", "shortname": "ModelNavigator", "properties": {"_mouseOffset": {"guessedname": "_mouseOffset", "type": "Object", "description": "The offset of the mouse pointer when dragging the clipping rect", "private": "", "guessedtype": "property"}, "_image": {"guessedname": "_image", "type": "Element", "description": "The image element", "private": "", "guessedtype": "property"}, "_instances": {"private": "", "description": "Array to keep track of all instances", "guessedname": "_instances", "guessedtype": "property"}, "_clippingRect": {"guessedname": "_clippingRect", "type": "Element", "description": "The clipping rectangle DIV element.", "private": "", "guessedtype": "property"}, "modelviewer": {"type": "ModelViewer", "description": "The ModelViewer that is navigated", "guessedname": "modelviewer", "guessedtype": "property"}, "_absXY": {"guessedname": "_absXY", "type": "Array", "description": "The absolute position [x, y] of the navigator element", "private": "", "guessedtype": "property"}}, "description": "The ModelNavigator widget is a UI control that enables users to navigate\nin a model displayed in a ModelViewer component. A rectangle indicates the\nmodel clipping."}, "MOVI.widget.ModelViewer": {"name": "MOVI.widget.ModelViewer", "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": " The id of the container DIV element that will \nwrap the ModelViewer, or a reference to a DIV element. The DIV element must\nexist in the document."}], "description": "A widget to display an Oryx model"}], "namespace": "MOVI.widget", "module": "movi", "guessedname": "ModelViewer", "methods": {"_loadImage": {"guessedname": "_loadImage", "params": [{"type": "String", "name": "uri", "description": " The URI of the model (without /self)."}], "description": "Load the PNG image representation of the model.", "private": "", "guessedtype": "function"}, "centerScrollTo": {"throws": "Error if scrollbox dimensions cannot be calculated", "params": [{"type": "Integer", "name": "x", "description": " The center's x position"}, {"type": "Integer", "name": "y", "description": " The center's y position"}], "description": "Scrolls to the specified position, centers the (canvas around the) position \nwithin the scrollbox.", "guessedname": "centerScrollTo", "guessedtype": "function"}, "getIndex": {"description": "Returns the model viewer index (unique per page)", "guessedname": "getIndex", "guessedtype": "function"}, "getScrollboxEx": {"return": {"type": "Element", "description": "The scrollbox Element"}, "description": "Returns the canvas container Element realizing scrolling", "guessedname": "getScrollboxEl", "guessedtype": "function"}, "_syncLoadingReady": {"guessedname": "_syncLoadingReady", "params": [{"type": "String", "name": "resource", "description": "  A string that identifies the successfully loaded resource (\"image\" or \"data\")"}], "description": "Synchronization of asynchronous resource loading. When all resources (model image and \nmodel data) are loaded successfully this method will trigger the execution of the \nmodel load success callback.", "private": "", "guessedtype": "function"}, "getImgHeight": {"return": {"type": "Integer", "description": "The image height"}, "description": "Returns the original height (100% zoom level) of the model image element in pixels", "guessedname": "getImgHeight", "guessedtype": "function"}, "loadModel": {"throws": "Exception, if passed URI is not valid", "params": [{"type": "String", "name": "uri", "description": " The URI of the model (without /self). \nFor example: 'http://oryx-editor.org/backend/poem/model/1234'"}, {"type": "Object", "name": "opt", "description": " Options: \n<dl>\n<dt>onSuccess</dt>\n<dd>\nCallback to execute when the model is finished loading\nThe callback receives the ModelViewer instance back.\n</dd>\n<dt>onFailure</dt>\n<dd>\nCallback to execute when the model load operation fails\nThe callback receives the ModelViewer instance back.\n</dd>\n<dt>onTimeout</dt>\n<dd>\nCallback to execute when a timeout occurs. If not set\nthe onFailure callback will be executed on timeout.\nThe callback receives the ModelViewer instance back.\n</dd>\n<dt>scope</dt>\n<dd>The execution scope for the callbacks.</dd>\n<dt>timeout</dt>\n<dd>\nNumber of milliseconds to wait before aborting the loading\nof the model and executing the onFailure callback.\nThe default value is 15000 (15 seconds).\n</dd>\n</dl>"}], "description": "Loads the specified Oryx model in the viewer.", "guessedname": "loadModel", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nMOVI.namespace(\"property.package\");\nMOVI.namespace(\"MOVI.property.package\");\n</pre>\nEither of the above would create MOVI.property, then\nMOVI.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nMOVI.namespace(\"really.long.nested.namespace\");\n</pre>\nThis fails because \"long\" is a future reserved word in ECMAScript\nThis method is taken from YUI's YAHOO object.", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "_onStencilSetLoadFailure": {"private": "", "description": "Callback for handling stencil set load failures.", "guessedname": "_onStencilSetLoadFailure", "guessedtype": "function"}, "init": {"static": "", "params": [{"type": "Function", "name": "modelReadyCallback", "description": " The function to call after loading of the model is finished"}, {"type": "String", "name": "moviBase", "description": " The path to the base directory of MOVI."}, {"type": "Function", "name": "yuiReadyCallback", "description": " (optional) The function to call after loading of the YUI modules is finished"}, {"type": "String*", "name": "yuiModules", "description": " (optional) Additional YUI modules to load. By default MOVI loads 'yahoo', 'dom', 'event', \n'get', 'event', 'logger', 'resize'. Use this parameter if your script depends on other YUI modules."}], "description": "Loads the required YUI resources and all MOVI scripts. When loading\nis finished the specified callback is executed.\nUse this method to initialize MOVI and wrap your MOVI specific code\nin the callback function passed to this method.\n<pre>\nMOVI.init(function() {\nvar modelViewer = new MOVI.widget.ModelViewer(YAHOO.util.Dom.get(\"myMoviDivId\"));\n}, \"script/movi\", setUpMyUI, [\"editor\"]);\n</pre>", "guessedname": "init", "guessedtype": "function"}, "getZoomLevel": {"return": {"type": "Number", "description": "The current model zoom level in percent"}, "description": "Returns the model zoom level in percent (minimum: 0, maximum: 100)", "guessedname": "getZoomLevel", "guessedtype": "function"}, "_onSuccess": {"private": "", "description": "Callback that is executed when the model is finished\nloading.", "guessedname": "_onSuccess", "guessedtype": "function"}, "fitModelToViewer": {"description": "Set the model zoom level so that the model fits in height and width to the model viewer", "guessedname": "fitModelToViewer", "guessedtype": "function"}, "_onStencilSetLoadTimeout": {"private": "", "description": "Callback for handling stencil set load timeouts.", "guessedname": "_onStencilSetLoadTimeout", "guessedtype": "function"}, "_onLoadTimeout": {"private": "", "description": "Callback for handling model load timeouts.", "guessedname": "_onLoadTimeout", "guessedtype": "function"}, "getImgWidth": {"return": {"type": "Integer", "description": "The image width"}, "description": "Returns the original width (100% zoom level) of the model image element in pixels", "guessedname": "getImgWidth", "guessedtype": "function"}, "_onLoadFailure": {"private": "", "description": "Callback for handling model load failures.", "guessedname": "_onLoadFailure", "guessedtype": "function"}, "setZoomLevel": {"params": [{"type": "Number", "name": "percent", "description": " The zoom level in percent"}, {"type": "Boolean", "name": "notifyStartEnd", "description": " (optional) If set to false markers, annotations and shape rects will \nnot be updated. Default is true."}], "description": "Set the model zoom level in percent (minimum: 0, maximum: 100)", "guessedname": "setZoomLevel", "guessedtype": "function"}, "getInstance": {"return": {"type": "MOVI.widget.ModelViewer", "description": "A ModelViewer instance"}, "params": [{"type": "Integer | String", "name": "id", "description": " The id of the ModelViewer instance, \nor the id of the instance's host DIV element."}], "description": "Returns the ModelViewer instance with the specified id.", "guessedname": "getInstance", "guessedtype": "function"}, "scrollToShape": {"return": {"type": "Element", "description": "The shape element / null if it does not exist"}, "description": "Scrolls to the shape, i.e. centers the (canvas around the) shape \nwithin the scrollbox.", "params": [{"type": "Shape", "name": "shape", "description": " the shape or its resource id"}], "guessedname": "scrollToShape", "guessedtype": "function", "throws": "Error if scrollbox dimensions cannot be calculated"}, "loadModelCallback": {"params": [{"type": "", "name": "jsonObj", "description": " The delivered JSON Object"}], "description": "JSONP callback to load model data from the JSON web service", "guessedname": "loadModelCallback", "guessedtype": "function"}, "loadStencilSetCallback": {"params": [{"type": "", "name": "jsonObj", "description": " The delivered JSON Object"}], "description": "JSONP callback to load stencilset data from the JSON web service", "guessedname": "loadStencilSetCallback", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "modelviewer.js", "guessedtype": "function", "shortname": "ModelViewer", "properties": {"canvas": {"type": "Canvas", "description": "The model's canvas", "guessedname": "canvas", "guessedtype": "property"}, "onZoomLevelChange": {"type": "YAHOO.util.CustomEvent", "description": "The event that is triggered when the model zoom level changes", "guessedname": "onZoomLevelChange", "guessedtype": "property"}, "onZoomLevelChangeStart": {"type": "YAHOO.util.CustomEvent", "description": "The event that is triggered when the model zoom level change starts\n(on zoom slider slideStart event)", "guessedname": "onZoomLevelChangeStart", "guessedtype": "property"}, "_syncResources": {"guessedname": "_syncResources", "type": "Array", "description": "An array that stores tokens that identify resources to load. Loading of these resources is \nsynchronized before the model load success callback is executed", "private": "", "guessedtype": "property"}, "_loadOptions": {"guessedname": "_loadOptions", "type": "Object", "description": "Options passed to loadModel method", "private": "", "guessedtype": "property"}, "_image": {"guessedname": "_image", "type": "Element", "description": "The image element", "private": "", "guessedtype": "property"}, "_imageWidth": {"guessedname": "_imageWidth", "type": "Integer", "description": "The original width of the image", "private": "", "guessedtype": "property"}, "_zoomLevel": {"guessedname": "_zoomLevel", "type": "Number", "description": "The model zoom level in percent", "private": "", "guessedtype": "property"}, "_scrollbox": {"guessedname": "_scrollbox", "type": "Element", "description": "The canvas container Element realizing scrolling", "private": "", "guessedtype": "property"}, "_imageHeight": {"guessedname": "_imageHeight", "type": "Integer", "description": "The original height of the image", "private": "", "guessedtype": "property"}, "onZoomLevelChangeEnd": {"type": "YAHOO.util.CustomEvent", "description": "The event that is triggered when the model zoom level change is finished\n(on zoom slider slideEnd event)", "guessedname": "onZoomLevelChangeEnd", "guessedtype": "property"}, "_modelUri": {"guessedname": "_modelUri", "type": "String", "description": "URI of the model to display", "private": "", "guessedtype": "property"}}, "description": "A widget to display an Oryx model"}, "MOVI.model.Node": {"name": "MOVI.model.Node", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new node\nis created."}, {"type": "Object", "name": "stencilset", "description": " The stencilset for lookup of the node's \nstencil."}, {"type": "Shape", "name": "parent", "description": " The node's parent shape"}, {"type": "String", "name": "prefix", "description": " The element's ID prefix (unique per modelviewer)"}], "description": "A wrapper class for model nodes."}], "namespace": "MOVI.model", "module": "movi", "guessedname": "Node", "methods": {"_createHostElement": {"private": "", "description": "Create the host element.", "guessedname": "_createHostElement", "guessedtype": "function"}, "_getSubclassForJSONObj": {"guessedname": "_getSubclassForJSONObj", "params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object to create the shape from"}, {"type": "Stencilset", "name": "stencilset", "description": " The stencilset object"}], "description": "Returns the appropriate subclass to choose when creating the shape \nobject from the specified JSON object. If no subclass can be \ndetermined the Shape base class is returned.", "private": "", "guessedtype": "function"}, "update": {"description": "Update style properties of the element", "guessedname": "update", "guessedtype": "function"}}, "extends": "MOVI.model.Shape", "superclass": "MOVI.model.Shape", "file": "node.js", "guessedtype": "function", "shortname": "Node", "description": "A wrapper class for model nodes."}, "MOVI.stencilset.Stencilset": {"name": "MOVI.stencilset.Stencilset", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON definition of a stencilset"}], "description": "Stencilset is a collection of stencils."}], "namespace": "MOVI.stencilset", "module": "movi", "guessedname": "Stencilset", "methods": {"getStencil": {"params": [{"type": "", "name": "jsonObj", "description": " The delivered JSON Object"}], "description": "Returns the stencil object with the specified id. If\nthe stencilset does not contain a matching stencil\nnull is returned.", "guessedname": "getStencil", "guessedtype": "function"}}, "file": "stencilset.js", "guessedtype": "function", "shortname": "Stencilset", "properties": {"stencils": {"description": "A key map containing all stencils of the stencilset as values.\nRetrieve an entry using the stencil's id as the key.", "guessedname": "stencils", "guessedtype": "property"}}, "description": "Stencilset is a collection of stencils."}, "MOVI.widget.ZoomSlider": {"name": "MOVI.widget.ZoomSlider", "constructors": [{"params": [{"type": "HTMLElement | String ", "name": "el", "description": " The id of the container DIV element that will \nwrap the ZoomSlider, or a reference to a DIV element. The DIV element must\nexist in the document."}, {"type": "ModelViewer", "name": "modelviewer", "description": " The ModelViewer for that zooming is enabled"}], "description": "The ZoomSlider widget is a slider UI control that enables users to adjust the\nzoom level of a model viewer."}], "namespace": "MOVI.widget", "module": "movi", "guessedname": "ZoomSlider", "methods": {"_setUpHostElementFullscreenViewer": {"private": "", "guessedname": "_setUpHostElementFullscreenViewer", "guessedtype": "function"}, "update": {"description": "Update the state of the slider control to current model zoom level.\nThis method should be called when the model viewer's zoom level has been changed.", "guessedname": "update", "guessedtype": "function"}, "_onSlideStart": {"private": "", "description": "Callback that is executed when sliding starts", "guessedname": "_onSlideStart", "guessedtype": "function"}, "onChange": {"description": "Callback method that is executed when the slider is changed. Updates the zoom level of the model viewer.\nThis method should also be called when the model viewer is resized.", "guessedname": "onChange", "guessedtype": "function"}, "_onSlideEnd": {"private": "", "description": "Callback that is executed when sliding ends", "guessedname": "_onSlideEnd", "guessedtype": "function"}, "_swapNode": {"guessedname": "_swapNode", "params": [{"type": "", "name": "n1", "description": " the first node to swap"}, {"type": "", "name": "n2", "description": " the other node to swap"}], "description": "Swap two nodes. In IE, we use the native method, for others we\nemulate the IE behavior", "private": "", "guessedtype": "function"}}, "file": "zoom.js", "guessedtype": "function", "shortname": "ZoomSlider", "properties": {"slider": {"type": "YAHOO.widget.Slider", "description": "The slider UI element", "guessedname": "slider", "guessedtype": "property"}}, "description": "The ZoomSlider widget is a slider UI control that enables users to adjust the\nzoom level of a model viewer."}, "MOVI.util.Annotation": {"name": "MOVI.util.Annotation", "constructors": [{"params": [{"type": "Marker", "name": "marker", "description": " The Marker to attach the Annotation to"}, {"type": "String", "name": "content", "description": " The Annotation's inner HTML content"}], "description": "Create an Annotation for a Marker to enrich the model with additional information \nand functionality. The Annotation renders a speech bubble containing arbitrary\nXHTML content and attachs it to the Marker."}], "namespace": "MOVI.util", "module": "movi", "guessedname": "Annotation", "methods": {"": {"private": "", "description": "Create the host element.", "guessedname": "_createHostElement", "guessedtype": "function"}, "_update": {"private": "", "description": "Update the position of the annotation bubble", "guessedname": "_update", "guessedtype": "function"}, "hide": {"description": "Hide the annotation bubble", "guessedname": "hide", "guessedtype": "function"}, "show": {"description": "Show the annotation bubble", "guessedname": "show", "guessedtype": "function"}, "onClose": {"params": [{"type": "Function", "name": "callback", "description": " The callback function"}, {"type": "Object", "name": "scope", "description": " The object to use as the scope for the callback"}, {"type": "Any", "name": "data", "description": " The variable to pass to the callback function"}], "description": "Specfiy a callback that is executed when the annotation bubble is\nclosed using the close button", "guessedname": "onClose", "guessedtype": "function"}, "_onClose": {"private": "", "description": "Callback that is executed when the close button is clicked", "guessedname": "_close", "guessedtype": "function"}, "remove": {"description": "Remove the element from the DOM", "guessedname": "remove", "guessedtype": "function"}, "toggle": {"description": "Toggle show/hide the annotation bubble", "guessedname": "toggle", "guessedtype": "function"}, "bringToFront": {"description": "Brings the annotation to the front of all the other annotations on the canvas", "guessedname": "bringToFront", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "annotation.js", "guessedtype": "function", "shortname": "Annotation", "properties": {"_contentElement": {"guessedname": "_contentElement", "type": "Element", "description": "The Element containing the specified content as inner HTML.", "private": "", "guessedtype": "property"}, "_marker": {"guessedname": "_marker", "type": "Marker", "description": "The marker that the annotation is attached to", "private": "", "guessedtype": "property"}, "_canvas": {"guessedname": "_canvas", "type": "Canvas", "description": "The canvas that the annotation is attached to", "private": "", "guessedtype": "property"}, "_closeCallback": {"guessedname": "_closeCallback", "type": "Object", "description": "The callback that is executed when the annotation bubble is closed", "private": "", "guessedtype": "property"}}, "description": "Create an Annotation for a Marker to enrich the model with additional information \nand functionality. The Annotation renders a speech bubble containing arbitrary\nXHTML content and attachs it to the Marker."}, "MOVI.stencilset.Stencil": {"name": "MOVI.stencilset.Stencil", "constructors": [{"params": [{"type": "Object", "name": "jsonObj", "description": " The JSON object from which the new stencil\nis created."}], "description": "Stencil represents an entity of a stencilset."}], "namespace": "MOVI.stencilset", "module": "movi", "guessedname": "Stencil", "file": "stencil.js", "guessedtype": "function", "shortname": "Stencil", "description": "Stencil represents an entity of a stencilset."}, "MOVI.util.ShapeSelect": {"name": "MOVI.util.ShapeSelect", "constructors": [{"params": [{"type": "ModelViewer", "name": "modelviewer", "description": " The ModelViewer for that shape selection is enabled"}, {"type": "Shape*", "name": "shapes", "description": " (optional) The subset of shapes that are selectable. If not specified \nall shapes are selectable."}, {"type": "Boolean", "name": "multiselect", "description": " (optional) If set to true, multiple shapes can be selected (default is false)."}], "description": "Enbable shape selection for the specified model viewer"}], "namespace": "MOVI.util", "module": "movi", "guessedname": "ShapeSelect", "methods": {"reset": {"description": "Reset the current selection", "guessedname": "reset", "guessedtype": "function"}, "deselect": {"params": [{"type": "[Shape] | Shape", "name": "shapes", "description": " The shapes to remove from the selection"}], "description": "Remove the specified shapes from the current selection", "guessedname": "deselect", "guessedtype": "function"}, "getSelectShapes": {"returns": "{[Shape]} An array of selected Shape objects", "description": "Returns the currently selected shapes", "guessedname": "getSelectedShapes", "guessedtype": "function"}, "unhighlight": {"params": [{"type": "Shape", "name": "shape", "description": " The shape to be unhighlighted"}], "description": "Unhighlight the specified shape by hiding the highlighting marker", "guessedname": "unhighlight", "guessedtype": "function"}, "getSelectionMarker": {"returns": "{Marker} The selection marker", "description": "Returns the marker of the current selection", "guessedname": "getSelectionMarker", "guessedtype": "function"}, "onSelectionChanged": {"params": [{"type": "Function", "name": "callback", "description": " The callback method"}, {"type": "Object", "name": "scope", "description": " (optional) The execution scope of the callback \n(in none is specified the context of the ShapeSelect object is used)"}, {"type": "Any", "name": "data", "description": " (optional) An optional data object to pass to the callback method"}], "description": "Specify callback to be executed when the selection changes\n(shapes are added to or removed from the current selection)", "guessedname": "onSelectionChanged", "guessedtype": "function"}, "highlight": {"params": [{"type": "Shape", "name": "shape", "description": " The shape to be highlighted"}], "description": "Highlight the specified shape by showing the highlighting marker", "guessedname": "highlight", "guessedtype": "function"}, "select": {"params": [{"type": "[Shape] | Shape", "name": "shapes", "description": " The shapes to add to the selection"}], "description": "Add the specified shapes to the current selection", "guessedname": "select", "guessedtype": "function"}}, "file": "shapeselect.js", "guessedtype": "function", "shortname": "ShapeSelect", "description": "Enbable shape selection for the specified model viewer"}}, "version": "0.3", "namespaces": ["MOVI.util", "MOVI.model", "MOVI.widget", "MOVI.stencilset"]}