<project name="Oryx Repository" basedir="../">
	
	<property file="build.properties" />
	
	<!-- Server (poem-jvm) properties *************************************************** -->
	<property name="server-root-dir" value="poem-jvm" />
	
	<property name="build-dir" value="build" />
	<property name="target-dir" value="dist" />
	<property name="war-dir" value="war" />
	<property name="java-dir" value="${server-root-dir}/src/java" />
	<property name="poem-build-dir" value="${build-dir}/poem-jvm" />
	<property name="bin-dir" value="${poem-build-dir}/bin" />
	<property name="lib-dir" value="${server-root-dir}/lib" />
	<property name="data-dir" value="${server-root-dir}/data" />
	
	<!--<property name="repository-dir" value="${server-root-dir}/src/javascript/repository" />-->
	<property name="repository2-dir" value="${server-root-dir}/src/javascript/repository2" />
	<property name="config-dir" value="${server-root-dir}/etc" />
	
	
	<!-- Server targets (backend.war) ****************************************************** -->
	
    <target name="deploy-backend">
        <copy file="${war-dir}/backend.war" tofile="${deploymentdir}/backend.war"/>
    </target>
    
    <target name="undeploy-backend">
        <delete file="${deploymentdir}/backend.war"/>
    </target>
	
	<target name="clean-backend">
		<delete dir="${poem-build-dir}" />
		<delete file="${target-dir}/backend.war" />
	</target>
	
	<target name="compile-backend">
		<mkdir dir="${bin-dir}"/>
		<javac srcdir="${java-dir}" destdir="${bin-dir}" debug="${java-debug}" >
			<classpath id="libs"> 
				<fileset dir="${lib-dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>
	
	<target name="compress-repository-javascript">
		<concat destfile='${poem-build-dir}/repository2/repository2.js'>
            <fileset file="${server-root-dir}/src/javascript/repository2/prototype.js"/>
			<fileset file="editor/lib/ext-2.0.2/adapter/ext/ext-base.js"/>
			<fileset file="editor/lib/ext-2.0.2/ext-all.js"/>
			<filelist id="repsourcefiles" dir="${server-root-dir}/src/javascript/repository2">
                <file name='ext_templates.js'/>
				<file name='core/clazz.js'/>
                <file name='core/helper.js'/>
				<file name='config.js'/>
				<file name='core/extExtention.js'/>
				<file name='core/eventHandler.js'/>
                <file name='core/dataCache.js'/>
                <file name='core/repository.js'/>
                <file name='core/plugin.js'/>
                <file name='core/viewPlugin.js'/>
                <file name='core/contextFreePlugin.js'/>
                <file name='core/contextPlugin.js'/>
            </filelist>
			<fileset dir="${server-root-dir}/src/javascript/repository2/plugins" includes="**/*.js"/>
        </concat>
	</target>
	
	<target name="dist" depends="compile-backend, compress-repository-javascript, generate-version-file-backend" >
		<!-- Add Hibernate xml files to the binary classes dir -->
		<copy file="${config-dir}/hibernate.cfg.xml" todir="${bin-dir}" />
		<copy file="${data-dir}/Access.hbm.xml" todir="${bin-dir}" />
		<mkdir dir="${target-dir}" />
		<mkdir dir="${target-dir}/backend" />
		<mkdir dir="${target-dir}/backend/WEB-INF" />
		
    	<copy todir="${target-dir}/backend/WEB-INF" >
    		<fileset dir="${config-dir}">
    			<include name="web.xml"/>
    			<depend  targetdir="${target-dir}/backend/WEB-INF" />
    		</fileset>
    	</copy>

    	<copy todir="${target-dir}/backend">
          <fileset dir="editor/lib">
            <include name="ext-2.0.2/"/>
          	<depend  targetdir="${target-dir}/backend/ext-2.0.2" />
          </fileset>          
    	</copy>


		<copy todir="${target-dir}/backend">
			<fileset dir="${data-dir}" >
				<include name="images/" />
				<depend targetdir="${target-dir}/backend/ext-2.0.2"/>
			</fileset>
		</copy>
		
		<copy todir="${target-dir}/backend">
			<fileset dir="${server-root-dir}" >
				<include name="i18n/" />
				<depend targetdir="${target-dir}/backend/i18n"/>
			</fileset>
		</copy>

		<copy todir="${target-dir}/backend">
			<fileset dir="${server-root-dir}/src" >
				<include name="css/" />
				<depend targetdir="${target-dir}/backend/css"/>
			</fileset>
		</copy>

		<copy todir="${target-dir}/backend">
			<fileset dir="${server-root-dir}/src/javascript" >
				<include name="repository2/" />
				<depend targetdir="${target-dir}/backend/repository2"/>
			</fileset>
		</copy>
		
		<copy todir="${target-dir}/backend">
			<fileset dir="${poem-build-dir}" >
				<include name="repository2/" />
				<depend targetdir="${target-dir}/backend/repository2"/>
			</fileset>
		</copy>
    	<mkdir dir="${target-dir}/backend/WEB-INF/lib"/>
    	<copy todir="${target-dir}/backend/WEB-INF/lib">
          <fileset dir="${lib-dir}">
            <include name="**/*.*"/>
          	<depend  targetdir="${target-dir}/backend/WEB-INF/lib" />
          </fileset>          
    	</copy>

    	<mkdir dir="${target-dir}/backend/WEB-INF/classes" />
    	<copy todir="${target-dir}/backend/WEB-INF/classes">
    		<fileset dir="${bin-dir}">
    			<include name="**/*.*" />
              	<depend  targetdir="${target-dir}/backend/WEB-INF/classes" />
    		</fileset>
    	</copy>

		<mkdir dir="${target-dir}/backend/META-INF" />
    	<copy file="build/editor/LICENSE" tofile="${target-dir}/backend/META-INF/LICENSE" />

		
    	<copy todir="${target-dir}/backend/WEB-INF" >
    		<fileset dir="${server-root-dir}/etc">
				<include name="backend.properties" />
				<include name="*.crt" />
    			<depend  targetdir="${target-dir}/backend/WEB-INF" />
    		</fileset>
    	</copy>
    	<copy file="${poem-build-dir}/version.xml" tofile="${target-dir}/backend/version.xml" />
    	<copy file="favicon.ico" tofile="${target-dir}/backend/favicon.ico" />    	    

	</target>	
	
	
	<target name="build-backend-war" depends="compile-backend, compress-repository-javascript, generate-version-file-backend" >
		<!-- Add Hibernate xml files to the binary classes dir -->
		<copy file="${config-dir}/hibernate.cfg.xml" todir="${bin-dir}" />
		<copy file="${data-dir}/Access.hbm.xml" todir="${bin-dir}" />
		<mkdir dir="${target-dir}" />
		<war destfile="${war-dir}/backend.war"  
			webxml="${config-dir}/web.xml" 
			update="true">
			<!-- Ext files-->
			<!--TODO the backend should not reference anything in folder editor-->
			<fileset dir="editor/lib" >
				<include name="ext-2.0.2/" />
			</fileset>	
			<!-- Image files-->
			<fileset dir="${data-dir}" >
				<include name="images/" />
			</fileset>
			<!-- Internationalization files-->
			<fileset dir="${server-root-dir}" >
				<include name="i18n/" />
			</fileset>
			<!-- Css files-->
			<fileset dir="${server-root-dir}/src" >
				<include name="css/" />
			</fileset>
			<!-- Javascript files-->
			<fileset dir="${server-root-dir}/src/javascript" >
				<!--<include name="repository/" />-->
				<include name="repository2/" />
			</fileset>
			<fileset dir="${poem-build-dir}" >
				<include name="repository2/" />
			</fileset>
			
			<lib dir="${lib-dir}" />
			<classes dir="${bin-dir}" />
			<metainf file="build/LICENSE"/>
			
			<webinf dir="${server-root-dir}/etc">
				<include name="backend.properties" />
				<include name="*.crt" />
			</webinf>
			
			<fileset file="favicon.ico"/>
            <fileset file="${poem-build-dir}/version.xml" />
		</war>
	</target>
	
	
    <!-- Database targets ****************************************************** -->
    <target name="create-db">
        <exec executable="${postgresql-bin-dir}/createdb">
            <arg value="--echo" />
            <arg value="--host=${postgresql-hostname}" />
            <arg value="--username=${postgresql-username}" />
            <arg value="--port=${postgresql-port}" />
            <arg value="--owner=poem" />
            <arg value="poem" />
        </exec>
        <exec executable="${postgresql-bin-dir}/psql">
            <arg value="--host=${postgresql-hostname}" />
            <arg value="--username=${postgresql-username}" />
            <arg value="--port=${postgresql-port}" />
            <arg value="--dbname=poem" />
            <arg value="--file=${data-dir}/database/db_schema.sql" />
        </exec>
    </target>

    <target name="drop-db">
        <exec executable="${postgresql-bin-dir}/dropdb">
            <arg value="--echo" />
            <arg value="--host=${postgresql-hostname}" />
            <arg value="--username=${postgresql-username}" />
            <arg value="--port=${postgresql-port}" />
            <arg value="poem" />
        </exec>
    </target>

    <target name="recreate-db" depends="drop-db, create-db" />


    <!-- generates a file containing the Subversion branch and revision number
         a build was made from, which may come handy for tracking issues -->
    <target name='generate-version-file-backend'>
        <exec executable="svn" dir="${server-root-dir}" output="${poem-build-dir}/version.xml" failifexecutionfails="false">
            <arg value="info"/>
            <arg value="--non-interactive"/>
            <arg value="--xml"/>
        </exec>
    </target>
    <target name="build-backend" depends="dist, build-backend-war"/>
</project>
