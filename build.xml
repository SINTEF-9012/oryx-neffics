<?xml version="1.0" encoding="utf-8"?>
<project name="Oryx Main Build Script" basedir="./">
	
    <!-- Load additional properties -->
    <property file="build.properties"/>
	<property name="build-dir" value="build" />
	<property name="target-dir" value="dist" />
    
    <!-- Import ANT build scripts of sub projects -->
    <import file="editor/build.xml"/>
    <!--<import file="editor/test.xml"/>-->
    <import file="poem-jvm/build.xml"/>
    <!--<import file="stick/build.xml"/>-->
	<import file="mashup/build.xml"/>
    
    <!-- (RE)BUILD EDITOR AND BACKEND -->
    <target name="build-all" depends="build-editor, build-backend, generate-build-dependcy-graph" />
    <target name="rebuild-all" depends="clean-editor, build-editor, clean-backend, build-backend" />
    
    <!-- CLEAN EDITOR AND BACKEND -->
    <target name="clean-all" depends="clean-editor, clean-backend">
        <!-- the depencies are somewhat redundant at the moment, but also future-proof -->
    	<delete dir="${build-dir}"/>
		<delete dir="${target-dir}"/>
	</target>
    
    
    <!-- DEPLOYMENT TARGETS (NO BUILD OF PROJECTS!) -->
    
    <!-- (UN)DEPLOY EDITOR AND BACKEND -->
    <target name="deploy-all" depends="deploy-editor, deploy-backend"/>
    <target name="undeploy-all" depends="undeploy-editor, undeploy-backend"/>

	
    <!-- Generate dependency graph of Ant tasks using Grand
         http://www.ggtools.net/grand/
         Grand is distributed under the terms of the BSD License. -->
    <target name="generate-build-dependcy-graph" depends="check-build-dependcy-graph" unless="buildDependencyGraph.isUpToDate">
        <typedef resource="net/ggtools/grand/antlib.xml" classpath="buildApps/lib/grand-1.8.jar"/>
        <grand output="build.dot" />
        <!-- the replaceregexp task requires ant-nodeps.jar and fails the build
             if the library is not found
        <typedef
            name="replaceregexp"
            classname="org.apache.tools.ant.taskdefs.optional.ReplaceRegExp"
            classpath="buildApps/lib/ant-nodeps.jar" />
        <replaceregexp file="build.dot"
            match="Oryx (Repository|Editor|BuildApps|on a Stick)\."
            replace="" flags="g" />
        <replaceregexp file="build.dot"
            match="^digraph"
            replace="strict digraph" flags="s" byline="true" />
        -->
        <!-- sed is only available on unix systems
        <exec executable="sed" failonerror="false" failifexecutionfails="false">
            <arg line="-i -e 's/Oryx \(Repository\|Editor\|BuildApps\|on a Stick\).//' -e 's/^digraph/strict digraph/' build.dot"/>
        </exec>
        -->
        <replace file="build.dot" token="Oryx Repository." />
        <replace file="build.dot" token="Oryx Editor." />
        <replace file="build.dot" token="Oryx BuildApps." />
        <replace file="build.dot" token="Oryx on a Stick." />
        <replace file="build.dot" token="MashUp." />
        <replace file="build.dot" token="digraph &quot;" value="strict digraph &quot;" />
        <!-- the dot tool from http://graphviz.org/ is required
             but it won't fail the build if not available -->
        <exec executable="dot" failonerror="false" failifexecutionfails="false">
            <arg line="-Tpng -o build-dependencies.png build.dot"/>
        </exec>
        <delete file="build.dot"/>
    </target>

    <!-- check if regeneration of build dependency graph is required -->
    <target name="check-build-dependcy-graph">
        <uptodate property="buildDependencyGraph.isUpToDate" targetfile="build-dependencies.png">
            <srcfiles file="build.xml" />
            <srcfiles file="editor/build.xml" />
            <srcfiles file="poem-jvm/build.xml" />
            <srcfiles file="stick/build.xml" />
			<srcfiles file="mashup/build.xml" />
        </uptodate>
    </target>
</project>
